Translating Nginx to Envoy/ISTIO Service mesh
-----------------------------------------------
-----------------------------------------------
VS - Virtual service
GW - Gateway
DR - Destination rule
EF - Envoy Filter
NA - Not achievable
NR - Not related

----------------------
----------------------

EXAMPLE 1
---------


app-root: =  VS (HTTP-rewrite)
proxy-body-size = EF 
proxy-connect-timeout = VS (Timeout/retries) 
proxy-read-timeout =  
proxy-send-timeout = 
proxy_set_header X-Forwarded-Host $host
proxy_set_header X-Forwarded-Server $host
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for
location /xyz
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade = 
proxy_set_header Connection "upgrade"  = 
proxy_pass http://xyz
ingress.class "xyz"


EXAMPLE 2
---------

Rewrite URI (regex)
proxy-body-size (Dup)
proxy-read-timeout (Dup)
proxy-send-timeout (Dup)
server-alias: = GW host
ingress.class (Dup)


EXAMPLE 3
---------
location (regex)
set {$namespace ,$ingress_name, $service_name, $service_port, $location_path}
rewrite_by_lua_block
header_filter_by_lua_block
body_filter_by_lua_block
log_by_lua_block
if/else (conditional statement)
$scheme 
more_set_headers Strict-Transport-Security:max-age=15724800; includeSubDomains"
$proxy_upstream_name
$ngx_re
$proxy_host
client_max_body_size 
proxy_set_header Upgrade                  $http_upgrade;
proxy_set_header Connection               $connection_upgrade;
proxy_set_header X-Request-ID             $req_id;
proxy_set_header X-Real-IP                $the_real_ip;
proxy_set_header X-Forwarded-For          $the_real_ip;
proxy_set_header X-Forwarded-Host         $best_http_host;
proxy_set_header X-Forwarded-Port         $pass_port;
proxy_set_header X-Forwarded-Proto        $pass_access_scheme;
proxy_set_header X-Original-URI           $request_uri;
proxy_set_header X-Scheme                 $pass_access_scheme;
proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
proxy_set_header Proxy  "";
proxy_connect_timeout   5s;
proxy_send_timeout      60s;
proxy_read_timeout      60s;
proxy_buffering         off;
proxy_buffer_size       4k;
proxy_buffers           4 4k;
proxy_request_buffering on;
proxy_http_version      1.1;
proxy_cookie_domain     off;
proxy_cookie_path       off;
proxy_next_upstream error timeout;
proxy_next_upstream_tries 3;
proxy_pass                https://upstream_balancer;
proxy_redirect            off;


Example 4
---------

limit_except GET POST
location uri (regex) (key|value) 
if/else {$server_name, $proxy_upstream_name}
proxy_pass



Example 5
---------

auth-tls-secret = GW - Credentials
auth-tls-verify-client = EF
auth-tls-verify-depth = NA custom validator extension 
set $cntnt_type
$http_content_type
$request_method
proxy_set_header Content-Type $cntnt_type
rewrite-target: /

Example 6
---------

auth-tls-secret = GW - Credentials
auth-tls-verify-client = EF
$http_origin
more_set_headers "Access-Control-Allow-Origin: $http_origin"
cors-allow-credentials = VS
cors-allow-headers = VS
cors-allow-origin = VS
cors-allow-methods = VS
enable-cors: "true"
proxy-connect-timeout: "600"
proxy-read-timeout: "600"
proxy-send-timeout: "600"
ingress.class: intranet



Example 7
---------

ingress.class: intranet
rewrite-target: /
location (regx) 
proxy_pass
proxy_set_header Host $http_x_forwarded_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_connect_timeout 10s;
proxy_send_timeout 120s;
proxy_read_timeout 120s;
client_max_body_size 300m;







    
 
