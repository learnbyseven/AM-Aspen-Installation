
CA
--
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=amz Inc./CN=amazonaws.com' -keyout ca.key -out ca.crt


//openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=giri Inc ./CN=example.com' -keyout ca.key -out ca.crt


CSR/ServerKEY
-------------
openssl req -out server.csr -newkey rsa:2048 -nodes -keyout server.key -subj "/CN=ec2-15-207-229-119.ap-south-1.compute.amazonaws.com/O=amz"


//openssl req -out server.csr -newkey rsa:2048 -nodes -keyout web.example.com.key -subj "/CN=web.example.com/O=giri Inc."

ServerCERT
----------
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 1 -in server.csr -out server.crt
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 1 -in server.csr -out web.example.com.crt


ClientCERT
----------
openssl req -out client.csr -newkey rsa:2048 -nodes -keyout client.key -subj "/CN=client.myapp.com/O=client organization"
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 1 -in client.csr -out client.crt

openssl req -out client.csr -newkey rsa:2048 -nodes -keyout client.key -subj "/CN=client.example.com/O=giri Inc."
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 1 -in client.csr -out client.crt


Verify :
curl --cert client.crt --key client.key --cacert ca.crt https://ec2-15-207-229-119.ap-south-1.compute.amazonaws.com:8181

curl --cert client.crt --key client.key --cacert ca.crt https://web.example.com



QUICK COPY/PASTE
----------------
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=amz Inc./CN=amazonaws.com' -keyout ca.key -out ca.crt
openssl req -out server.csr -newkey rsa:2048 -nodes -keyout server.key -subj "/CN=ec2-15-207-229-119.ap-south-1.compute.amazonaws.com/O=amz"
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 2 -in server.csr -out server.crt


kubectl create secret -n istio-system generic client-credential --from-file=tls.key=client.key --from-file=tls.crt=client.crt --from-file=ca.crt=ca.crt
kubectl create secret -n test generic client-certs --from-file=tls.key=client.key --from-file=tls.crt=client.crt --from-file=ca.crt=ca.crt
kubectl create secret -n istio-system generic fake-certs --from-file=tls.key=client.key --from-file=tls.crt=client.crt --from-file=ca.crt=ca.crt


FAKECERTS
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=myown.in./CN=myown.in' -keyout ca.key -out ca.crt
openssl req -out client.csr -newkey rsa:2048 -nodes -keyout client.key -subj "/CN=fake.myapp.in/O=client organization"
openssl x509 -req -sha256 -days 365 -CA ca.crt -CAkey ca.key -set_serial 1 -in client.csr -out client.crt

