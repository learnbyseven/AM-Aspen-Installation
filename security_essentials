Service_Identity 
- Service-account
- Strong_workload_identity - x509 

SM - Authentication - (Authentication policies) 
- Peer (Transport , S-to-S, Key/Cert management), m-TLS permissive mode
- Request (JWT validation, IDP integration) 

Authentication policies 
Kind 
    - PeerAuthentication 

that provides services such as secure communication, authentication, and authorization for users, services, and devices (e.g., service mesh)

enforced through identity-based protection and network-based protections (e.g., micro-segmentation), where applicable.

call for a different application development, deployment, and runtime monitoring paradigm (collectively called the software life cycle paradigm)

the chosen platform is a container orchestration and resource management platform (e.g., Kubernetes). The platform is an abstraction layer over a physical (bare metal) or virtualized (e.g., virtual machines

• Secure design patterns for deploying and managing service mesh-based components for infrastructure (e.g., network routing), policy enforcement, and monitoring
• Tests to prove that these service mesh components work as intended in a variety of scenarios for all aspects of the application, such as ingress, egress, and inside services

instructions for the runtime instance on the designated platform. Manifests are generally encoded in platform-neutral representations (e.g., JSON) and fed to platform resource provisioning agents through REST APIs.


Kubernetes Network Policy [8], this is a layer 3
Tracing is required to trace the sequence of containers that are invoked as part of any application request based on the application logic that underlies a transaction. Since traffic flow cannot be traced through Kubernetes pods out of the box, it is unclear where on the chain the failure for the request occurred.

Last but not the least are security-related policies (e.g., authentication and authorization policies, TLS establishment policies, etc.). These policy rules are parsed by a module that converts them into configuration parameters for use by executables in data plane proxies that enforce those policies.

The data plane coThe data plane component performs three different functions:
1. Secure networking functions

The functions that come under this category are service discovery, 
establishing a secure (TLS) session, 
establishing network paths and routing rules for each microservice and its associated requests, 
authenticating each request (from a service or user), and authorizing the request.


2. Policy enforcement functions
3. Observability functions


